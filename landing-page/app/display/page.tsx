'use client';

import { useState, useEffect, Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

function DisplayContent() {
  const [reportContent, setReportContent] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>('');
  const searchParams = useSearchParams();
  const reportUrl = searchParams.get('reportUrl');

  useEffect(() => {
    if (!reportUrl) {
      setError('No report URL provided');
      setLoading(false);
      return;
    }

    const fetchReport = async () => {
      try {
        setLoading(true);
        setError('');
        
        // Call our edge function to download and display the report
        const response = await fetch(`/api/fetch-report?url=${encodeURIComponent(reportUrl)}`);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch report: ${response.statusText}`);
        }
        
        const content = await response.text();
        setReportContent(content);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load report');
      } finally {
        setLoading(false);
      }
    };

    fetchReport();
  }, [reportUrl]);

  if (loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
          <p className="text-gray-300">Loading audit report...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 text-6xl mb-4">⚠️</div>
          <h1 className="text-2xl font-bold text-white mb-2">Error Loading Report</h1>
          <p className="text-gray-300 mb-4">{error}</p>
          <button 
            onClick={() => window.location.reload()} 
            className="px-4 py-2 bg-white text-black rounded hover:bg-gray-200 transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black">
      <div className="max-w-4xl mx-auto py-8 px-4">
        <div className="bg-gray-900 rounded-lg shadow-2xl p-8 border border-gray-800">
          <div className="mb-6 flex justify-between items-start">
            <div>
              <h1 className="text-3xl font-bold text-white mb-2">Audit Report</h1>
              <p className="text-gray-400">Generated by Boring Notch Security Auditor</p>
            </div>
            <button
              onClick={() => {
                navigator.clipboard.writeText(reportContent);
                // You could add a toast notification here
              }}
              className="px-4 py-2 bg-white text-black rounded hover:bg-gray-200 transition-colors font-medium"
            >
              Copy Report
            </button>
          </div>
          
          <div className="prose prose-invert prose-lg max-w-none prose-headings:text-white prose-p:text-gray-300 prose-strong:text-white prose-code:text-green-400 prose-code:bg-gray-800 prose-pre:bg-gray-800 prose-blockquote:text-gray-400 prose-blockquote:border-gray-700">
            <ReactMarkdown 
              remarkPlugins={[remarkGfm]}
              components={{
                code: ({node, className, children, ...props}: any) => {
                  const match = /language-(\w+)/.exec(className || '');
                  const inline = !match;
                  return !inline && match ? (
                    <pre className="bg-gray-800 rounded-lg p-4 overflow-x-auto">
                      <code className={className} {...props}>
                        {children}
                      </code>
                    </pre>
                  ) : (
                    <code className="bg-gray-800 text-green-400 px-1 py-0.5 rounded text-sm" {...props}>
                      {children}
                    </code>
                  );
                },
                pre: ({children}) => (
                  <pre className="bg-gray-800 rounded-lg p-4 overflow-x-auto border border-gray-700">
                    {children}
                  </pre>
                ),
                table: ({children}) => (
                  <div className="overflow-x-auto">
                    <table className="min-w-full border border-gray-700 rounded-lg">
                      {children}
                    </table>
                  </div>
                ),
                th: ({children}) => (
                  <th className="border border-gray-700 bg-gray-800 px-4 py-2 text-left text-white font-semibold">
                    {children}
                  </th>
                ),
                td: ({children}) => (
                  <td className="border border-gray-700 px-4 py-2 text-gray-300">
                    {children}
                  </td>
                ),
              }}
            >
              {reportContent}
            </ReactMarkdown>
          </div>
        </div>
      </div>
    </div>
  );
}

export default function DisplayPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
          <p className="text-gray-300">Loading...</p>
        </div>
      </div>
    }>
      <DisplayContent />
    </Suspense>
  );
}
